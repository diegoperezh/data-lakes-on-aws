AWSTemplateFormatVersion: "2010-09-09"
Description: SDLF Automated Cleanup

Parameters:
  pEnvironment:
    Description: Environment
    Type: String
    Default: dev
    AllowedValues: ["dev", "test", "prod"]
  pStorageDeploymentInstance:
    Description: Storage deployment instance
    Type: String
    Default: dev
  pDatasetDeploymentInstance:
    Description: Dataset deployment instance
    Type: String
    Default: dev
  pTeam:
    Description: sdlf-team team name
    Type: String
    Default: engineering

Resources:
  rCodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: sdlf-automated-cleanup
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: sdlf-automated-cleanup
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Resource: !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/sdlf-*
                Effect: Allow
                Action:
                  - cloudformation:DeleteChangeSet
                  - cloudformation:DeleteStack
                  - cloudformation:DescribeChangeSet
                  - cloudformation:DescribeStacks
                  - cloudformation:UpdateTerminationProtection
              - Resource: !Sub arn:aws:cloudformation:${AWS::Region}:aws:transform/*
                Effect: Allow
                Action:
                  - cloudformation:DeleteChangeSet
                  - cloudformation:DescribeChangeSet
              - Resource: "*"
                Effect: Allow
                Action:
                  - cloudformation:GetTemplate
                  - cloudformation:GetTemplateSummary
                  - cloudformation:ListStacks
                  - cloudformation:ValidateTemplate
              - Effect: Allow
                Action:
                  - cloudformation:RegisterType
                  - cloudformation:SetTypeDefaultVersion
                  - cloudformation:DescribeType
                  - cloudformation:DeregisterType
                Resource:
                  - !Sub "arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:type/MODULE/awslabs::sdlf::*"
                  - !Sub "arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:type/module/awslabs-sdlf-*"
                  - !Sub "arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:type/MODULE/*"
                  - !Sub "arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:type/module/*"
              - Effect: Allow
                Action:
                  - cloudformation:DescribeTypeRegistration # W11 exception
                Resource:
                  - "*"
              - Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/sdlf-*
                Effect: Allow
                Action:
                  - dynamodb:DeleteTable
                  - dynamodb:DescribeTable
                  - dynamodb:DescribeTimeToLive
              - Resource:
                  - !Sub arn:aws:events:${AWS::Region}:${AWS::AccountId}:event-bus/default
                  - !Sub arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/sdlf-*
                Effect: Allow
                Action:
                  - events:DeleteRule
                  - events:DescribeRule
                  - events:DisableRule
                  - events:RemoveTargets
                  - events:RemovePermission
              - Resource: !Sub arn:aws:iam::${AWS::AccountId}:role/*
                Effect: Allow
                Action: iam:PassRole
                Condition:
                  StringEqualsIfExists:
                    iam:PassedToService:
                      - cloudformation.amazonaws.com
                      - codepipeline.amazonaws.com
                      - codebuild.amazonaws.com
                      - lambda.amazonaws.com
              - Resource: "*"
                Effect: Allow
                Action:
                  - iam:GetRole
                  - iam:GetRolePolicy
                  - iam:ListPolicies
                  - iam:ListPolicyVersions
                  - iam:ListRoles
                  - iam:ListRolePolicies
                  - iam:PutRolePolicy
              - Resource:
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/sdlf-*
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/state-machine/sdlf-*
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/*
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/service-role/*
                Effect: Allow
                Action:
                  - iam:DeleteRole
                  - iam:DeleteRolePolicy
                  - iam:DetachRolePolicy
                  - iam:PassRole
                  - iam:UntagRole
              - Resource: !Sub arn:aws:iam::${AWS::AccountId}:group/sdlf-*
                Effect: Allow
                Action:
                  - iam:ListGroups
                  - iam:GetGroup
                  - iam:DeleteGroup
                  - iam:DetachGroupPolicy
                  - iam:GetGroupPolicy
                  - iam:DeleteGroupPolicy
              - Resource: !Sub arn:aws:iam::${AWS::AccountId}:policy/sdlf-*
                Effect: Allow
                Action:
                  - iam:DeletePolicy
                  - iam:DeletePolicyVersion
                  - iam:GetPolicy
                  - iam:GetPolicyVersion
              - Resource: "*"
                Effect: "Allow"
                Action:
                  - lambda:DeleteFunction
                  - lambda:DeleteFunctionConcurrency
                  - lambda:DeleteLayerVersion
                  - lambda:GetFunction
                  - lambda:GetFunctionConfiguration
                  - lambda:GetLayerVersion
                  - lambda:InvokeFunction
                  - lambda:ListFunctions
                  - lambda:ListFunctions
                  - lambda:ListLayers
                  - lambda:ListLayerVersions
                  - lambda:ListTags
                  - lambda:RemovePermission
                  - lambda:UntagResource
              - Resource: "*"
                Effect: "Allow"
                Action:
                  - lambda:GetEventSourceMapping
                  - lambda:DeleteEventSourceMapping
              - Resource: "*"
                Effect: "Allow"
                Action:
                  - logs:CreateLogGroup
                  - logs:DescribeLogGroups
              - Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:sdlf-*:log-stream:*
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/sdlf-*:log-stream:*
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/sdlf-*:log-stream:*
                Effect: Allow
                Action:
                  - logs:PutRetentionPolicy
                  - logs:CreateLogStream
                  - logs:DeleteLogGroup
                  - logs:DeleteLogStream
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                  - logs:TagLogGroup
                  - logs:UntagLogGroup
              - Resource: !Sub arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:sdlf-*
                Effect: Allow
                Action:
                  - cloudwatch:DeleteAlarms
                  - cloudwatch:DescribeAlarms
                  - cloudwatch:DisableAlarmActions
                  - cloudwatch:GetMetricData
              - Resource: !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:*
                Effect: Allow
                Action: sns:ListTopics
              - Resource: !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:sdlf-*
                Effect: Allow
                Action:
                  - sns:DeleteTopic
                  - sns:GetTopicAttributes
                  - sns:SetTopicAttributes
              - Resource: "*"
                Effect: Allow
                Action:
                  - s3:DeleteBucket
                  - s3:DeleteBucketPolicy
                  - s3:GetBucketAcl
                  - s3:GetBucketPolicy
                  - s3:GetEncryptionConfiguration
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:ListBuckets
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:GetBucketVersioning
                  - s3:ListBucketVersions
                  - s3:DeleteObjectVersion
              - Resource: !Sub arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/*
                Effect: Allow
                Action:
                  - codebuild:BatchGetProjects
                  - codebuild:BatchGetBuilds
                  - codebuild:DeleteProject
              - Resource: !Sub arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:sdlf-*
                Effect: Allow
                Action:
                  - codepipeline:DeletePipeline
                  - codepipeline:GetPipelineState
                  - codepipeline:GetPipeline
              - Effect: Allow
                Action:
                  - scheduler:GetScheduleGroup
                  - scheduler:DeleteScheduleGroup
                  - scheduler:ListTagsForResource
                  - scheduler:UntagResource
                  - scheduler:TagResource
                  - scheduler:DeleteSchedule
                  - scheduler:GetSchedule
                Resource:
                  - !Sub arn:${AWS::Partition}:scheduler:${AWS::Region}:${AWS::AccountId}:schedule-group/sdlf-*
                  - !Sub arn:${AWS::Partition}:scheduler:${AWS::Region}:${AWS::AccountId}:schedule/sdlf-*
              - Resource: !Sub arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:*
                Effect: Allow
                Action: sqs:ListQueues
              - Resource: !Sub arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:sdlf-*
                Effect: Allow
                Action:
                  - sqs:DeleteQueue
                  - sqs:GetQueueAttributes
                  - sqs:GetQueueUrl
                  - sqs:ListQueues
                  - sqs:ListQueueTags
                  - sqs:RemovePermission
                  - sqs:SetQueueAttributes
                  - sqs:UntagQueue
              - Resource: "*"
                Effect: Allow
                Action:
                  - ssm:DescribeParameters
              - Resource: 
                - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/SDLF/*
                - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/sdlf/*
                Effect: Allow
                Action:
                  - ssm:DeleteParameter
                  - ssm:DeleteParameters
                  - ssm:GetOpsSummary
                  - ssm:GetParameter
                  - ssm:GetParameterHistory
                  - ssm:GetParameters
                  - ssm:GetParametersByPath
                  - ssm:ListTagsForResource
                  - ssm:RemoveTagsFromResource
              - Resource: "*"
                Effect: Allow
                Action:
                  - lakeformation:BatchRevokePermissions
                  - lakeformation:DeregisterResource
                  - lakeformation:DescribeResource
                  - lakeformation:GetDataAccess
                  - lakeformation:GrantPermissions
                  - lakeformation:ListPermissions
                  - lakeformation:ListResources
                  - lakeformation:RegisterResource
                  - lakeformation:RevokePermissions
                  - lakeformation:UpdateResource
                  - lakeformation:GetDataLakeSettings
              - Resource: "*"
                Effect: Allow
                Action:
                  - cloudtrail:DescribeTrails
                  - cloudtrail:ListTrails
              - Resource: !Sub arn:aws:cloudtrail:${AWS::Region}:${AWS::AccountId}:trail/sdlf-*
                Effect: Allow
                Action:
                  - cloudtrail:DeleteTrail
                  - cloudtrail:ListTags
                  - cloudtrail:RemoveTags
                  - cloudtrail:StopLogging
              - Resource:
                  - !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/* # todo: at the time this stack is created, we might get keys arn from ssm. but they may not be there as well
                  - !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/*
                Effect: Allow
                Action:
                  - kms:ListKeys
                  - kms:ListGrants
                  - kms:ListKeyPolicies
                  - kms:ListResourceTags
                  - kms:Decrypt
                  - kms:DescribeKey
                  - kms:DisableKey
                  - kms:DisableKeyRotation
                  - kms:GetKeyPolicy
                  - kms:RetireGrant
                  - kms:RevokeGrant
                  - kms:ScheduleKeyDeletion
                  - kms:UntagResource
                  - kms:DeleteAlias
              - Resource: "*"
                Effect: Allow
                Action:
                  - elasticmapreduce:DeleteSecurityConfiguration
                  - elasticmapreduce:DescribeSecurityConfiguration
                  - elasticmapreduce:ListSecurityConfigurations
                  - elasticmapreduce:RemoveTags
              - Resource: "*"
                Effect: Allow
                Action:
                  - glue:DeleteCrawler
                  - glue:DeleteDatabase
                  - glue:DeleteJob
                  - glue:DeleteSecurityConfiguration
                  - glue:GetCrawler
                  - glue:GetDatabase
                  - glue:GetDatabases
                  - glue:GetDataCatalogEncryptionSettings
                  - glue:GetPartitions
                  - glue:GetSecurityConfiguration
                  - glue:GetSecurityConfigurations
                  - glue:GetTable
                  - glue:GetTables
                  - glue:SearchTables
                  - glue:StopCrawler
                  - glue:UntagResource
              - Resource: "*"
                Effect: Allow
                Action:
                  - states:ListStateMachines
                  - states:DeleteStateMachine
                  - states:DescribeStateMachine

  rLambdaTriggerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                Resource:
                  - !GetAtt rCleanUpCodeBuildProject.Arn

  # rDataLakeSettings:
  #   Type: AWS::LakeFormation::DataLakeSettings
  #   Properties:
  #     Admins:
  #       - DataLakePrincipalIdentifier: !GetAtt rCodeBuildRole.Arn
  #     CreateDatabaseDefaultPermissions: []
  #     CreateTableDefaultPermissions: []
  #     MutationType: APPEND

  rCleanUpCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: "sdlf-clean-up-codebuild"
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:5.0
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: STORAGE_DEPLOYMENT_INSTANCE
            Value: !Ref pStorageDeploymentInstance
          - Name: DATASET_DEPLOYMENT_INSTANCE
            Value: !Ref pDatasetDeploymentInstance
          - Name: TEAM_NAME
            Value: !Ref pTeam
          - Name: ENV
            Value: !Ref pEnvironment
          - Name: PRINCIPAL
            Value: !GetAtt rCodeBuildRole.Arn
      ServiceRole: !Ref rCodeBuildRole
      TimeoutInMinutes: 60
      Source:
        Type: NO_SOURCE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                  python: 3.12
            build:
              commands:
                - |
                  echo "Granting Drop on Glue DBs"
                  SDLF_ORG=$(aws ssm get-parameter --name "/sdlf/storage/rOrganization/$STORAGE_DEPLOYMENT_INSTANCE" --query "Parameter.Value" --output text)
                  for DB in $(aws glue get-databases | jq -r '.[][].Name')
                  do
                    case "$DB" in 
                      $SDLF_ORG*) aws lakeformation grant-permissions --principal DataLakePrincipalIdentifier="$PRINCIPAL" --permissions DROP --resource $(echo \'{\"Database\":{\"Name\":\"$DB\"}}\' | tr -d \');; 
                      *) echo "Skipping non-SDLF database" ;; 
                    esac
                  done
                - |
                  echo "Fetch KMS keys ARN - SSM parameters won't be available once stacks have been deleted"
                  declare -a KEYS=("/sdlf/storage/rKMSKey/$STORAGE_DEPLOYMENT_INSTANCE"
                                   "/sdlf/dataset/rKMSInfraKey/$DATASET_DEPLOYMENT_INSTANCE"
                                   "/sdlf/dataset/rKMSDataKey/$DATASET_DEPLOYMENT_INSTANCE"
                                   "/SDLF/KMS/$TEAM_NAME/InfraKeyId"
                                  )
                  KEYS_ARN=()
                  for KEY in $KEYS
                  do
                    echo "Finding $KEY ARN"
                    if KEY_ARN=$(aws ssm get-parameter --name "$KEY" --query "Parameter.Value" --output text); then
                      KEYS_ARN+=("$KEY_ARN")
                    else
                      echo "Key does not exist, skipping"
                    fi
                  done
                - |
                  echo "Emptying SDLF buckets..."
                  declare -a BUCKETS=("/sdlf/storage/rArtifactsBucket/$STORAGE_DEPLOYMENT_INSTANCE"
                                      "/sdlf/storage/rRawBucket/$STORAGE_DEPLOYMENT_INSTANCE"
                                      "/sdlf/storage/rStageBucket/$STORAGE_DEPLOYMENT_INSTANCE"
                                      "/sdlf/storage/rAnalyticsBucket/$STORAGE_DEPLOYMENT_INSTANCE"
                                      "/sdlf/storage/rAthenaBucket/$STORAGE_DEPLOYMENT_INSTANCE"
                                      "/sdlf/storage/rS3AccessLogsBucket/$STORAGE_DEPLOYMENT_INSTANCE"
                                     )
                  for BUCKET in $BUCKETS
                  do
                    echo "Finding $BUCKET bucket name"
                    if S3_BUCKET=$(aws ssm get-parameter --name "$BUCKET" --query "Parameter.Value" --output text); then
                      echo "Emptying $S3_BUCKET"
                      aws s3 rm "s3://$S3_BUCKET" --recursive
                      if [ $(aws s3api get-bucket-versioning --bucket "$S3_BUCKET" --output text) == "Enabled" ]; then
                        objects_versions=$(aws s3api list-object-versions --bucket "$S3_BUCKET" --output=json --query='{Objects: Versions[].{Key:Key,VersionId:VersionId}}')
                        if [ $(jq -r ".Objects" <<< "$objects_versions") != "null" ]; then
                          aws s3api delete-objects --bucket "$S3_BUCKET" --delete "$objects_versions"
                        fi
                      fi
                    else
                      echo "Bucket does not exist, skipping"
                    fi
                  done
                - |
                  echo "Deleting SDLF stacks..."
                  STACKS=$(aws cloudformation list-stacks --query "StackSummaries[?starts_with(StackName,'sdlf-') && StackStatus!='DELETE_COMPLETE']" | jq -r "sort_by(.CreationTime) | reverse[] | select(.ParentId == null) | .StackName")
                  for STACK in $STACKS
                  do
                    echo "Deleting stack $STACK"
                    aws cloudformation delete-stack --stack-name "$STACK"
                  done
                  for STACK in $STACKS
                  do
                    echo "Waiting for $STACK stack delete to complete ..." && aws cloudformation wait stack-delete-complete --stack-name "$STACK" && echo "Finished delete successfully!"
                  done
                - |
                  echo "Deleting KMS keys"
                  for KEY_ARN in $KEYS_ARN
                  do
                    echo "Deleting $KEY_ARN"
                      aws kms schedule-key-deletion --key-id "$KEY_ARN" --pending-window-in-days 7 2>&1
                  done

  rLambdaTrigger:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.12
      Timeout: 120
      MemorySize: 128
      Handler: index.lambda_handler
      Role: !GetAtt rLambdaTriggerRole.Arn
      Environment:
        Variables:
          CODE_BUILD_PROJECT: !Ref rCleanUpCodeBuildProject
      Code:
        ZipFile: |
          import os
          import json

          import boto3
          from botocore.exceptions import ClientError
          from urllib.request import Request, urlopen

          CODE_BUILD_PROJECT = os.getenv('CODE_BUILD_PROJECT')
          cb = boto3.client('codebuild')

          def send_response(e, c, rs, rd):
              r = json.dumps({
                  "Status": rs,
                  "Reason": "CloudWatch Log Stream: " + c.log_stream_name,
                  "PhysicalResourceId": e['LogicalResourceId'],
                  "StackId": e['StackId'],
                  "RequestId": e['RequestId'],
                  "LogicalResourceId": e['LogicalResourceId'],
                  "Data": rd
              })
              d = str.encode(r)
              h = {
                  'content-type': '',
                  'content-length': str(len(d))
              }
              req = Request(e['ResponseURL'], data=d, method='PUT', headers=h)
              r = urlopen(req)

          def lambda_handler(event, context):
              request_type = event['RequestType']
              try:
                  if request_type == 'Create':
                      cb.start_build(projectName=CODE_BUILD_PROJECT)
                      send_response(event, context, "SUCCESS", {
                                    "Message": "Created"})

                  else:
                      send_response(event, context, "SUCCESS", {
                                    "Message": "Function Not Applicable"})
              except Exception as e:
                  send_response(
                      event,
                      context,
                      "FAILED",
                      {
                          "Message": "Exception"
                      }
                  )
                  raise e

  rCustomLambdaTrigger:
    Type: Custom::LambdaTrigger
    Properties:
      ServiceToken: !GetAtt rLambdaTrigger.Arn

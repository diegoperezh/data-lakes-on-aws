AWSTemplateFormatVersion: "2010-09-09"
Description: Contains all the resources necessary for a single dataset

Parameters:
  pPipelineReference:
    Type: String
    Default: none
  pOrg:
    Description: Name of the organization owning the datalake
    Type: String
    Default: "{{resolve:ssm:/SDLF/Misc/pOrg}}"
  pDomain:
    Description: Data domain name
    Type: String
    Default: "{{resolve:ssm:/SDLF/Misc/pDomain}}"
  pEnvironment:
    Description: Environment name
    Type: String
    Default: "{{resolve:ssm:/SDLF/Misc/pEnv}}"
  pRawBucket:
    Description: The raw bucket for the solution
    Type: String
    Default: "{{resolve:ssm:/SDLF/S3/RawBucket}}"
  pStageBucket:
    Description: The stage bucket for the solution
    Type: String
    Default: "{{resolve:ssm:/SDLF/S3/StageBucket}}"
  pAnalyticsBucket:
    Description: The analytics bucket for the solution
    Type: String
    Default: "{{resolve:ssm:/SDLF/S3/AnalyticsBucket}}"
  pArtifactsBucket:
    Description: The artifacts bucket used by CodeBuild and CodePipeline
    Type: String
    Default: "{{resolve:ssm:/SDLF/S3/ArtifactsBucket}}"
  pLakeFormationDataAccessRole:
    Type: String
    Default: "{{resolve:ssm:/SDLF/IAM/LakeFormationDataAccessRoleArn}}"
  pDatasetName:
    Description: The name of the dataset (all lowercase, no symbols or spaces)
    Type: String
    AllowedPattern: "[a-z0-9]{2,14}"
  pLegacyTeam:
    Description: Dataset resources are still deployed with sdlf-team
    Type: String
    Default: true
  pS3Prefix:
    Description: S3 prefix or full bucket if empty/not provided
    Type: String
    AllowedPattern: "[a-z0-9]*"
    Default: ""
  pCicdRole:
    Description: Name of the IAM role used to deploy SDLF constructs
    Type: String
    Default: ""
  pTeamName:
    Description: Name of the team owning the pipeline (all lowercase, no symbols or spaces)
    Type: String
    AllowedPattern: "[a-z0-9]*"
    Default: ""
  pPipelineDetails:
    Type: String
    Default: >-
      {
        "main": {
          "B": {
            "glue_capacity": {
              "NumberOfWorkers": 10,
              "WorkerType": "G.1X"
            },
            "glue_extra_arguments": {
              "--enable-auto-scaling": "true"
            }
          }
        }
      }
  # the ideal would be to fetch ssm:/SDLF/VPC/Enabled and not ask the user to set this variable to true manually.
  # however between AWS::SSM::Parameter::Value<String> not working in CloudFormation modules,
  # Fn::ImportValue not being accepted in CloudFormation modules template fragments,
  # {{resolve:}} being evaluated later than the Conditions block, options are limited.
  pEnableVpc:
    Description: Deploy SDLF resources in a VPC
    Type: String
    Default: false

Conditions:
  CicdRoleProvided: !Not [!Equals [!Ref pCicdRole, ""]]
  NotUseLegacyTeam: !Not [!Equals [!Ref pLegacyTeam, true]]
  IsS3Prefix: !And
    - !Condition NotUseLegacyTeam
    - !Not [!Equals [!Ref pS3Prefix, ""]]
  RunInVpc: !Equals [!Ref pEnableVpc, true]

Resources:
  ######## KMS #########
  rKMSInfraKey:
    Type: AWS::KMS::Key
    Condition: NotUseLegacyTeam
    UpdateReplacePolicy: Retain
    DeletionPolicy: RetainExceptOnCreate
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: F76
            reason: Full access is allowed to Key admin and some AWS services
    Properties:
      Description: !Sub SDLF ${pDatasetName} Infrastructure KMS Key
      EnableKeyRotation: True
      KeyPolicy:
        Version: "2012-10-17"
        Id: !Sub sdlf-${pDatasetName}-infra-key-policy
        Statement:
          - Sid: Allow administration of the key
            Effect: Allow
            Principal:
              AWS: [!Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"]
            Action: kms:*
            Resource: "*"
          - Sid: Allow CloudWatch alarms access
            Effect: Allow
            Principal:
              Service:
                - cloudwatch.amazonaws.com
                - events.amazonaws.com
            Action:
              - kms:Decrypt
              - kms:GenerateDataKey*
            Resource: "*"
          - Sid: Allow logs access
            Effect: Allow
            Principal:
              Service:
                - !Sub logs.${AWS::Region}.amazonaws.com
            Action:
              - kms:CreateGrant
              - kms:Decrypt
              - kms:DescribeKey
              - kms:Encrypt
              - kms:GenerateDataKey*
              - kms:ReEncrypt*
            Resource: "*"
          - Sid: Allow SNS access
            Effect: Allow
            Principal:
              AWS: "*"
            Action:
              - kms:Decrypt
              - kms:GenerateDataKey*
            Resource: "*"
            Condition:
              StringEquals:
                kms:CallerAccount: !Ref AWS::AccountId
                kms:ViaService: !Sub sns.${AWS::Region}.amazonaws.com

  rKMSInfraKeyAlias:
    Type: AWS::KMS::Alias
    Condition: NotUseLegacyTeam
    UpdateReplacePolicy: Retain
    DeletionPolicy: RetainExceptOnCreate
    Properties:
      AliasName: !Sub alias/sdlf-${pDatasetName}-kms-infra-key
      TargetKeyId: !Ref rKMSInfraKey

  rKMSInfraKeySsm:
    Type: AWS::SSM::Parameter
    Condition: NotUseLegacyTeam
    Properties:
      Name: !Sub /SDLF/KMS/${pDatasetName}/InfraKeyId
      Type: String
      Value: !GetAtt rKMSInfraKey.Arn
      Description: !Sub ${pDatasetName} KMS infrastructure key ARN

  rKMSDataKey:
    Type: AWS::KMS::Key
    Condition: IsS3Prefix
    UpdateReplacePolicy: Retain
    DeletionPolicy: RetainExceptOnCreate
    Properties:
      Description: !Sub SDLF ${pDatasetName} Data KMS Key
      EnableKeyRotation: True
      KeyPolicy:
        Version: "2012-10-17"
        Id: !Sub sdlf-${pDatasetName}-data-key-policy
        Statement:
          - Sid: Allow administration of the key
            Action: kms:*
            Effect: Allow
            Principal:
              AWS: [!Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"]
            Resource: "*"
          - Sid: Allow Lake Formation permissions
            Action:
              - kms:Encrypt*
              - kms:Decrypt*
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:Describe*
            Effect: Allow
            Principal:
              AWS: !Ref pLakeFormationDataAccessRole
            Resource: "*"

  rKMSDataKeyAlias:
    Type: AWS::KMS::Alias
    Condition: IsS3Prefix
    UpdateReplacePolicy: Retain
    DeletionPolicy: RetainExceptOnCreate
    Properties:
      AliasName: !Sub alias/sdlf-${pDatasetName}-kms-data-key
      TargetKeyId: !Ref rKMSDataKey

  rKMSDataKeySsm:
    Type: AWS::SSM::Parameter
    Condition: IsS3Prefix
    Properties:
      Name: !Sub /SDLF/KMS/${pDatasetName}/DataKeyId
      Type: String
      Value: !GetAtt rKMSDataKey.Arn
      Description: !Sub ${pDatasetName} KMS data key ARN

  ######## GLUE #########
  rGlueDataCatalog:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput: !If
        - NotUseLegacyTeam
        - Description: !Sub "${pDatasetName} metadata catalog"
          Name: !Sub ${pOrg}_${pDomain}_${pEnvironment}_${pDatasetName}_stage
        - Description: !Sub "${pTeamName} team ${pDatasetName} metadata catalog"
          Name: !Sub ${pOrg}_${pDomain}_${pEnvironment}_${pTeamName}_${pDatasetName}_db

  rGlueDataCatalogSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !If
        - NotUseLegacyTeam
        - !Sub /SDLF/Glue/${pDatasetName}/DataCatalog
        - !Sub /SDLF/Glue/${pTeamName}/${pDatasetName}/DataCatalog
      Type: String
      Value: !Ref rGlueDataCatalog
      Description: !If
        - NotUseLegacyTeam
        - !Sub "${pDatasetName} stage metadata catalog"
        - !Sub "${pTeamName} team ${pDatasetName} stage metadata catalog"

  rStageGlueDataCatalogSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /SDLF/Glue/${pDatasetName}/StageDataCatalog
      Type: String
      Value: !Ref rGlueDataCatalog
      Description: !Sub "${pDatasetName} stage metadata catalog"

  rRawGlueDataCatalog:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Description: !Sub "${pDatasetName} raw metadata catalog"
        Name: !Sub ${pOrg}_${pDomain}_${pEnvironment}_${pDatasetName}_raw

  rRawGlueDataCatalogSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /SDLF/Glue/${pDatasetName}/RawDataCatalog
      Type: String
      Value: !Ref rRawGlueDataCatalog
      Description: !Sub "${pDatasetName} raw metadata catalog"

  rAnalyticsGlueDataCatalog:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Description: !Sub "${pDatasetName} analytics metadata catalog"
        Name: !Sub ${pOrg}_${pDomain}_${pEnvironment}_${pDatasetName}_analytics

  rAnalyticsGlueDataCatalogSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /SDLF/Glue/${pDatasetName}/AnalyticsDataCatalog
      Type: String
      Value: !Ref rAnalyticsGlueDataCatalog
      Description: !Sub "${pDatasetName} analytics metadata catalog"

  rGlueSecurityConfiguration:
    Type: AWS::Glue::SecurityConfiguration
    Condition: NotUseLegacyTeam
    Properties:
      Name: !Sub sdlf-${pDatasetName}-glue-security-config
      EncryptionConfiguration:
        CloudWatchEncryption:
          CloudWatchEncryptionMode: SSE-KMS
          KmsKeyArn: !GetAtt rKMSInfraKey.Arn
        JobBookmarksEncryption:
          JobBookmarksEncryptionMode: CSE-KMS
          KmsKeyArn: !GetAtt rKMSInfraKey.Arn
        S3Encryptions:
          - S3EncryptionMode: SSE-KMS
            KmsKeyArn: !If
              - IsS3Prefix
              - !GetAtt rKMSDataKey.Arn
              - "{{resolve:ssm:/SDLF/KMS/KeyArn}}"

  rGlueSecurityConfigurationSsm:
    Type: AWS::SSM::Parameter
    Condition: NotUseLegacyTeam
    Properties:
      Name: !Sub /SDLF/Glue/${pDatasetName}/SecurityConfigurationId
      Type: String
      Value: !Sub sdlf-${pDatasetName}-glue-security-config # unfortunately AWS::Glue::SecurityConfiguration doesn't provide any return value
      Description: !Sub Name of the ${pDatasetName} Glue security configuration

  rEMRSecurityConfiguration:
    Type: AWS::EMR::SecurityConfiguration
    Condition: NotUseLegacyTeam
    Properties:
      Name: !Sub sdlf-${pDatasetName}-emr-security-config
      SecurityConfiguration: !If
        - IsS3Prefix
        - !Sub |
            {
              "EncryptionConfiguration": {
                "EnableInTransitEncryption" : false,
                "EnableAtRestEncryption" : true,
                "AtRestEncryptionConfiguration" : {
                  "S3EncryptionConfiguration" : {
                    "EncryptionMode" : "SSE-KMS",
                    "AwsKmsKey": "${rKMSDataKey}"
                  },
                  "LocalDiskEncryptionConfiguration" : {
                    "EncryptionKeyProviderType" : "AwsKms",
                    "AwsKmsKey" : "${rKMSDataKey}",
                    "EnableEbsEncryption" : true
                  }
                }
              },
              "InstanceMetadataServiceConfiguration":{
                "MinimumInstanceMetadataServiceVersion": 2,
                "HttpPutResponseHopLimit": 1
              }
            }
        - |
            {
              "EncryptionConfiguration": {
                "EnableInTransitEncryption" : false,
                "EnableAtRestEncryption" : true,
                "AtRestEncryptionConfiguration" : {
                  "S3EncryptionConfiguration" : {
                    "EncryptionMode" : "SSE-KMS",
                    "AwsKmsKey": "{{resolve:ssm:/SDLF/KMS/KeyArn}}"
                  },
                  "LocalDiskEncryptionConfiguration" : {
                    "EncryptionKeyProviderType" : "AwsKms",
                    "AwsKmsKey" : "{{resolve:ssm:/SDLF/KMS/KeyArn}}",
                    "EnableEbsEncryption" : true
                  }
                }
              },
              "InstanceMetadataServiceConfiguration":{
                "MinimumInstanceMetadataServiceVersion": 2,
                "HttpPutResponseHopLimit": 1
              }
            }

  rDatalakeCrawlerRole:
    Type: AWS::IAM::Role
    Condition: NotUseLegacyTeam
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: The actions with "*" are all ones that only support the all resources wildcard
    Properties:
      Path: !Sub /sdlf-${pDatasetName}/
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - glue.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSGlueServiceRole
      Policies:
        - PolicyName: !Sub sdlf-${pDatasetName}-glue-crawler
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:CreateBucket
                Resource: !Sub arn:${AWS::Partition}:s3:::aws-glue-*
              - Effect: Allow
                Action:
                  - s3:DeleteObject
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - !Sub arn:${AWS::Partition}:s3:::aws-glue-*/*
                  - !Sub arn:${AWS::Partition}:s3:::*/*aws-glue-*/*
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub arn:${AWS::Partition}:s3:::crawler-public*
                  - !Sub arn:${AWS::Partition}:s3:::aws-glue-*
              - Effect: Allow
                Action:
                  - s3:ListObjectsV2
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
                  - s3:GetBucketAcl
                  - s3:GetBucketLocation
                  - s3:PutObject
                  - s3:PutObjectVersion
                Resource:
                  - !Sub arn:${AWS::Partition}:s3:::${pRawBucket}/${pS3Prefix}/*
                  - !Sub arn:${AWS::Partition}:s3:::${pStageBucket}/${pS3Prefix}/*
                  - !Sub arn:${AWS::Partition}:s3:::${pAnalyticsBucket}/${pS3Prefix}/*
              - Effect: Allow
                Action:
                  - kms:DescribeKey
                  - kms:Encrypt
                  - kms:Decrypt
                  - kms:ReEncrypt*
                  - kms:GenerateDataKey*
                  - kms:CreateGrant
                Resource: !If
                  - IsS3Prefix
                  - - !GetAtt rKMSInfraKey.Arn
                    - !GetAtt rKMSDataKey.Arn
                    - "{{resolve:ssm:/SDLF/KMS/KeyArn}}"
                  - - !GetAtt rKMSInfraKey.Arn
                    - "{{resolve:ssm:/SDLF/KMS/KeyArn}}"
              - Effect: Allow
                Action:
                  - lakeformation:GetDataAccess # W11 exception
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:AssociateKmsKey
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws-glue/crawlers-role/sdlf-${pDatasetName}/*

  rDatalakeCrawlerRoleArnSsm:
    Type: AWS::SSM::Parameter
    Condition: NotUseLegacyTeam
    Properties:
      Name: !Sub /SDLF/IAM/${pDatasetName}/CrawlerRoleArn
      Type: String
      Value: !GetAtt rDatalakeCrawlerRole.Arn
      Description: ARN of the Crawler role

  rGlueCrawler:
    Type: AWS::Glue::Crawler
    Properties:
      Role: !If
        - NotUseLegacyTeam
        - !GetAtt rDatalakeCrawlerRole.Arn
        - !Sub "{{resolve:ssm:/SDLF/IAM/${pTeamName}/CrawlerRoleArn}}"
      CrawlerSecurityConfiguration: !If
        - NotUseLegacyTeam
        - !Sub sdlf-${pDatasetName}-glue-security-config # unfortunately AWS::Glue::SecurityConfiguration doesn't provide any return value
        - !Sub "{{resolve:ssm:/SDLF/Glue/${pTeamName}/SecurityConfigurationId}}"
      DatabaseName: !Ref rGlueDataCatalog
      Name: !If
        - NotUseLegacyTeam
        - !Sub sdlf-${pDatasetName}-stage-crawler
        - !Sub sdlf-${pTeamName}-${pDatasetName}-post-stage-crawler
      Targets:
        S3Targets:
          - Path: !If
            - NotUseLegacyTeam
            - !Sub s3://${pStageBucket}/${pS3Prefix}
            - !Sub s3://${pStageBucket}/post-stage/${pTeamName}/${pDatasetName}

  rGlueCrawlerLakeFormationPermissions:
    Type: AWS::LakeFormation::Permissions
    Properties:
      DataLakePrincipal:
        DataLakePrincipalIdentifier: !If
          - NotUseLegacyTeam
          - !GetAtt rDatalakeCrawlerRole.Arn
          - !Sub "{{resolve:ssm:/SDLF/IAM/${pTeamName}/CrawlerRoleArn}}"
      Permissions:
        - CREATE_TABLE
        - ALTER
        - DROP
      Resource:
        DatabaseResource:
          Name: !Ref rGlueDataCatalog

  rGlueCrawlerSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !If
        - NotUseLegacyTeam
        - !Sub /SDLF/Glue/${pDatasetName}/GlueCrawler
        - !Sub /SDLF/Glue/${pTeamName}/${pDatasetName}/GlueCrawler
      Type: String
      Value: !Ref rGlueCrawler
      Description: !If
        - NotUseLegacyTeam
        - !Sub "${pDatasetName} Glue crawler"
        - !Sub "${pTeamName} team ${pDatasetName} Glue crawler"

  rRawGlueCrawler:
    Type: AWS::Glue::Crawler
    Properties:
      Role: !If
        - NotUseLegacyTeam
        - !GetAtt rDatalakeCrawlerRole.Arn
        - !Sub "{{resolve:ssm:/SDLF/IAM/${pTeamName}/CrawlerRoleArn}}"
      CrawlerSecurityConfiguration: !If
        - NotUseLegacyTeam
        - !Sub sdlf-${pDatasetName}-glue-security-config # unfortunately AWS::Glue::SecurityConfiguration doesn't provide any return value
        - !Sub "{{resolve:ssm:/SDLF/Glue/${pTeamName}/SecurityConfigurationId}}"
      DatabaseName: !Ref rRawGlueDataCatalog
      Name: !If
        - NotUseLegacyTeam
        - !Sub sdlf-${pDatasetName}-crawler-raw
        - !Sub sdlf-${pTeamName}-${pDatasetName}-raw-crawler
      Targets:
        S3Targets:
          - Path: !If
            - NotUseLegacyTeam
            - !Sub s3://${pRawBucket}/${pS3Prefix}
            - !Sub s3://${pRawBucket}/${pTeamName}/${pDatasetName}

  rRawGlueCrawlerLakeFormationPermissions:
    Type: AWS::LakeFormation::Permissions
    Properties:
      DataLakePrincipal:
        DataLakePrincipalIdentifier: !If
          - NotUseLegacyTeam
          - !GetAtt rDatalakeCrawlerRole.Arn
          - !Sub "{{resolve:ssm:/SDLF/IAM/${pTeamName}/CrawlerRoleArn}}"
      Permissions:
        - CREATE_TABLE
        - ALTER
        - DROP
      Resource:
        DatabaseResource:
          Name: !Ref rRawGlueDataCatalog

  rRawGlueCrawlerSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !If
        - NotUseLegacyTeam
        - !Sub /SDLF/Glue/${pDatasetName}/RawGlueCrawler
        - !Sub /SDLF/Glue/${pTeamName}/${pDatasetName}/RawGlueCrawler
      Type: String
      Value: !Ref rRawGlueCrawler
      Description: !If
        - NotUseLegacyTeam
        - !Sub "${pDatasetName} Raw Glue crawler"
        - !Sub "${pTeamName} team ${pDatasetName} Raw Glue crawler"

  rAnalyticsGlueCrawler:
    Type: AWS::Glue::Crawler
    Properties:
      Role: !If
        - NotUseLegacyTeam
        - !GetAtt rDatalakeCrawlerRole.Arn
        - !Sub "{{resolve:ssm:/SDLF/IAM/${pTeamName}/CrawlerRoleArn}}"
      CrawlerSecurityConfiguration: !If
        - NotUseLegacyTeam
        - !Sub sdlf-${pDatasetName}-glue-security-config # unfortunately AWS::Glue::SecurityConfiguration doesn't provide any return value
        - !Sub "{{resolve:ssm:/SDLF/Glue/${pTeamName}/SecurityConfigurationId}}"
      DatabaseName: !Ref rAnalyticsGlueDataCatalog
      Name: !If
        - NotUseLegacyTeam
        - !Sub sdlf-${pDatasetName}-crawler-analytics
        - !Sub sdlf-${pTeamName}-${pDatasetName}-analytics-crawler
      Targets:
        S3Targets:
          - Path: !If
            - NotUseLegacyTeam
            - !Sub s3://${pAnalyticsBucket}/${pS3Prefix}
            - !Sub s3://${pAnalyticsBucket}/${pTeamName}/${pDatasetName}

  rAnalyticsGlueCrawlerLakeFormationPermissions:
    Type: AWS::LakeFormation::Permissions
    Properties:
      DataLakePrincipal:
        DataLakePrincipalIdentifier: !If
          - NotUseLegacyTeam
          - !GetAtt rDatalakeCrawlerRole.Arn
          - !Sub "{{resolve:ssm:/SDLF/IAM/${pTeamName}/CrawlerRoleArn}}"
      Permissions:
        - CREATE_TABLE
        - ALTER
        - DROP
      Resource:
        DatabaseResource:
          Name: !Ref rAnalyticsGlueDataCatalog

  rAnalyticsGlueCrawlerSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !If
        - NotUseLegacyTeam
        - !Sub /SDLF/Glue/${pDatasetName}/AnalyticsGlueCrawler
        - !Sub /SDLF/Glue/${pTeamName}/${pDatasetName}/AnalyticsGlueCrawler
      Type: String
      Value: !Ref rAnalyticsGlueCrawler
      Description: !If
        - NotUseLegacyTeam
        - !Sub "${pDatasetName} Analytics Glue crawler"
        - !Sub "${pTeamName} team ${pDatasetName} Analytics Glue crawler"

  rLakeFormationTag:
    Type: AWS::LakeFormation::Tag
    Condition: NotUseLegacyTeam
    Properties:
      CatalogId: !Ref AWS::AccountId
      TagKey: "sdlf:dataset"
      TagValues:
        - !Ref pDatasetName

  rLakeFormationTagTablesPermissions: # allows sdlf pipelines to grant permissions on tables associated with this lf-tag
    Type: AWS::LakeFormation::PrincipalPermissions
    Condition: NotUseLegacyTeam
    Properties:
      Principal:
        DataLakePrincipalIdentifier: !If
          - CicdRoleProvided
          - !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${pCicdRole}
          - !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:role/sdlf-cicd-team-${pDatasetName}
      Resource:
        LFTagPolicy:
          CatalogId: !Ref AWS::AccountId
          ResourceType: TABLE
          Expression:
            - TagKey: !Ref rLakeFormationTag
              TagValues:
                - !Ref pDatasetName
      Permissions:
        - ALL
      PermissionsWithGrantOption:
        - ALL

  rGlueDataCatalogLakeFormationTag:
    Type: AWS::LakeFormation::TagAssociation
    Properties:
      Resource:
        Database:
          CatalogId: !Ref AWS::AccountId
          Name: !Ref rGlueDataCatalog
      LFTags:
        - CatalogId: !Ref AWS::AccountId
          TagKey: !If
            - NotUseLegacyTeam
            - "sdlf:dataset"
            - !Sub "sdlf:team:${pTeamName}"
          TagValues:
            - !If
              - NotUseLegacyTeam
              - !Ref pDatasetName
              - !Sub ${pTeamName}

  ######## LAKEFORMATION PERMISSIONS #########
  rRawLakeFormationPermissions:
    Type: AWS::LakeFormation::Permissions
    Condition: NotUseLegacyTeam
    Properties:
      DataLakePrincipal:
        DataLakePrincipalIdentifier: !GetAtt rDatalakeCrawlerRole.Arn
      Permissions:
        - DATA_LOCATION_ACCESS
      Resource:
        DataLocationResource:
          S3Resource: !Sub arn:${AWS::Partition}:s3:::${pRawBucket}/${pS3Prefix}/

  rStageLakeFormationPermissions:
    Type: AWS::LakeFormation::Permissions
    Condition: NotUseLegacyTeam
    Properties:
      DataLakePrincipal:
        DataLakePrincipalIdentifier: !GetAtt rDatalakeCrawlerRole.Arn
      Permissions:
        - DATA_LOCATION_ACCESS
      Resource:
        DataLocationResource:
          S3Resource: !Sub arn:${AWS::Partition}:s3:::${pStageBucket}/${pS3Prefix}/

  rAnalyticsLakeFormationPermissions:
    Type: AWS::LakeFormation::Permissions
    Condition: NotUseLegacyTeam
    Properties:
      DataLakePrincipal:
        DataLakePrincipalIdentifier: !GetAtt rDatalakeCrawlerRole.Arn
      Permissions:
        - DATA_LOCATION_ACCESS
      Resource:
        DataLocationResource:
          S3Resource: !Sub arn:${AWS::Partition}:s3:::${pAnalyticsBucket}/${pS3Prefix}/

  ######## EVENTBRIDGE #########
  rEventBus:
    Type: AWS::Events::EventBus
    Condition: NotUseLegacyTeam
    Properties:
        Name: !Sub sdlf-${pDatasetName}

  rEventBusSsm:
    Type: AWS::SSM::Parameter
    Condition: NotUseLegacyTeam
    Properties:
      Name: !Sub /SDLF/EventBridge/${pDatasetName}/EventBusName
      Type: String
      Value: !Ref rEventBus
      Description: !Sub Name of the ${pDatasetName} event bus

  rScheduleGroup:
    Type: AWS::Scheduler::ScheduleGroup
    Condition: NotUseLegacyTeam
    Properties:
      Name: !Sub sdlf-${pDatasetName}

  rScheduleGroupSsm:
    Type: AWS::SSM::Parameter
    Condition: NotUseLegacyTeam
    Properties:
      Name: !Sub /SDLF/EventBridge/${pDatasetName}/ScheduleGroupName
      Type: String
      Value: !Ref rScheduleGroup
      Description: !Sub Name of the ${pDatasetName} schedule group

  rForwardEventBusTriggerRole:
    Type: AWS::IAM::Role
    Condition: NotUseLegacyTeam
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: sdlf-cicd-events-trigger
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: events:PutEvents
                Resource:
                  - !GetAtt rEventBus.Arn

  rForwardEventBusRule:
    Type: AWS::Events::Rule
    Condition: NotUseLegacyTeam
    Properties:
      EventPattern:
        source:
          - prefix: aws.
        account:
          - !Ref AWS::AccountId
        region:
          - !Ref AWS::Region
      Targets:
        - Arn: !GetAtt rEventBus.Arn
          RoleArn: !GetAtt rForwardEventBusTriggerRole.Arn
          Id: default-to-sdlf-dataset

  ######## IAM #########
  rIamManagedPolicy:
    Condition: NotUseLegacyTeam
    Type: AWS::IAM::ManagedPolicy
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W13
            reason: |-
              Condition applied to restrict access, and the KMS keys do not exist at this stage
              The other actions with "*" are all ones that only support the all resources wildcard
    Properties:
      Path: !Sub /sdlf/${pDatasetName}/ # keep this path for the dataset's permissions boundary policy only
      Description: Team Permissions Boundary IAM policy. Add/remove permissions based on company policy and associate it to federated role
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowConsoleListBuckets
            Effect: Allow
            Action:
              - s3:GetBucketLocation
              - s3:ListAllMyBuckets
            Resource: !Sub arn:${AWS::Partition}:s3:::*
          - Sid: AllowTeamBucketList
            Effect: Allow
            Action:
              - s3:ListBucket
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${pArtifactsBucket}
              - !Sub arn:${AWS::Partition}:s3:::${pRawBucket}
              - !Sub arn:${AWS::Partition}:s3:::${pStageBucket}
              - !Sub arn:${AWS::Partition}:s3:::${pAnalyticsBucket}
          - Sid: AllowTeamPrefixActions
            Effect: Allow
            Action:
              - s3:DeleteObject
              - s3:GetObject
              - s3:PutObject
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${pArtifactsBucket}/${pS3Prefix}/*
              - !Sub arn:${AWS::Partition}:s3:::${pRawBucket}/${pS3Prefix}/*
              - !Sub arn:${AWS::Partition}:s3:::${pStageBucket}/${pS3Prefix}/*
              - !Sub arn:${AWS::Partition}:s3:::${pAnalyticsBucket}/${pS3Prefix}/*
          - Sid: AllowFullCodeCommitOnTeamRepositories
            Effect: Allow
            Action:
              - codecommit:AssociateApprovalRuleTemplateWithRepository
              - codecommit:Batch* # Get, Describe, ApprovalRuleTemplate
              - codecommit:Create*
              - codecommit:DeleteBranch
              - codecommit:DeleteFile
              - codecommit:Describe*
              - codecommit:DisassociateApprovalRuleTemplateFromRepository
              - codecommit:EvaluatePullRequestApprovalRules
              - codecommit:Get*
              - codecommit:List*
              - codecommit:Merge*
              - codecommit:OverridePullRequestApprovalRules
              - codecommit:Put*
              - codecommit:Post*
              - codecommit:TagResource
              - codecommit:Test*
              - codecommit:UntagResource
              - codecommit:Update*
              - codecommit:Git*
            Resource:
              - !Sub arn:${AWS::Partition}:codecommit:${AWS::Region}:${AWS::AccountId}:sdlf-${pDatasetName}-*
          - Sid: AllowTeamKMSDataKeyUsage
            Effect: Allow
            Action:
              - kms:CreateGrant
              - kms:Decrypt
              - kms:DescribeKey
              - kms:Encrypt
              - kms:GenerateDataKey*
              - kms:ReEncrypt*
            Resource: !If
              - IsS3Prefix
              - - !GetAtt rKMSInfraKey.Arn
                - !GetAtt rKMSDataKey.Arn
                - "{{resolve:ssm:/SDLF/KMS/KeyArn}}"
              - - !GetAtt rKMSInfraKey.Arn
                - "{{resolve:ssm:/SDLF/KMS/KeyArn}}"
          - Effect: Allow
            Action:
              - ssm:GetParameter
              - ssm:GetParameters
            Resource: !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/SDLF/*
          - Sid: AllowOctagonDynamoAccess
            Effect: Allow
            Action:
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
              - dynamodb:DeleteItem
              - dynamodb:DescribeTable
              - dynamodb:GetItem
              - dynamodb:GetRecords
              - dynamodb:PutItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:UpdateItem
            Resource:
              - !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/octagon-*
          - Sid: AllowSQSManagement
            Effect: Allow
            Action:
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
              - sqs:GetQueueUrl
              - sqs:List*
              - sqs:ReceiveMessage
              - sqs:SendMessage
            Resource:
              - !Sub arn:${AWS::Partition}:sqs:${AWS::Region}:${AWS::AccountId}:sdlf-${pDatasetName}-*
          - Effect: Allow
            Action:
              - states:StartExecution
            Resource:
              - !Sub arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:stateMachine:sdlf-${pDatasetName}-*
          - Effect: Allow
            Action:
              - iam:PassRole
            Resource:
              - !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:role/sdlf-${pDatasetName}/sdlf-*
            Condition:
              StringEquals:
                "iam:PassedToService":
                  - glue.amazonaws.com
          - Effect: Allow
            Action:
              - glue:GetSecurityConfiguration # W13 exception
            Resource: "*"
          - Effect: Allow
            Action:
              - glue:GetTable
              - glue:StartCrawler
              - glue:GetCrawler
              - glue:GetJobRun
              - glue:GetJobRuns
              - glue:StartJobRun
              - glue:StartDataQualityRule*
              - glue:GetDataQualityRule*
            Resource:
              - !Sub arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:catalog
              - !Sub arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:database/${pOrg}_${pDomain}_${pEnvironment}_${pDatasetName}_*
              - !Sub arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:table/${pOrg}_${pDomain}_${pEnvironment}_${pDatasetName}_*
              - !Sub arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:crawler/sdlf-${pDatasetName}-*
              - !Sub arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:job/sdlf-${pDatasetName}-*
              - !Sub arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:job/${pOrg}-${pDomain}-${pEnvironment}-${pDatasetName}-*
              - !Sub arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:dataQualityRuleset/* # glue:StartDataQualityRuleRecommendationRun requires dataQualityRuleset/*
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
            Resource: !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:DescribeLogStreams
              - logs:GetLogEvents
              - logs:PutLogEvents
              - logs:AssociateKmsKey
            Resource:
              - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/sdlf-${pDatasetName}-*
              - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/sdlf-${pDatasetName}-*
              - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws-glue/jobs/sdlf-${pDatasetName}-*
          - Sid: AllowCloudFormationReadOnlyAccess
            Effect: Allow
            Action:
              - cloudformation:DescribeStacks
              - cloudformation:DescribeStackEvents
              - cloudformation:DescribeStackResource
              - cloudformation:DescribeStackResources
            Resource:
              - !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack:sdlf-${pDatasetName}:*
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource:
              - !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:sdlf-${pDatasetName}-*
          - Effect: Allow
            Action:
              - events:PutTargets
              - events:PutRule
              - events:DescribeRule
            Resource:
              - !Sub arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:rule/StepFunctions* # Step Functions managed rules: https://docs.aws.amazon.com/step-functions/latest/dg/service-integration-iam-templates.html#connect-iam-sync-async
          - Effect: Allow
            Action:
              - emr-serverless:CreateApplication
              - emr-serverless:GetApplication
            Resource:
              - !Sub arn:${AWS::Partition}:emr-serverless:${AWS::Region}:${AWS::AccountId}:/applications/*
          - !If
            - RunInVpc
            - Effect: Allow
              Action:
                - ec2:CreateNetworkInterface # W13 condition applied
                - ec2:DescribeNetworkInterfaces # W13 exception
                - ec2:DeleteNetworkInterface # W13 condition applied
                - ec2:AssignPrivateIpAddresses # W13 condition applied
                - ec2:UnassignPrivateIpAddresses # W13 condition applied
                - ec2:DescribeSubnets # W13 exception
                - ec2:DescribeSecurityGroups # W13 exception
                - ec2:DescribeVpcEndpoints # W13 exception
                - ec2:DescribeRouteTables # W13 exception
                - ec2:CreateTags # W13 condition applied
                - ec2:DeleteTags # W13 condition applied
              Resource:
                - "*"
              Condition:
                ArnEqualsIfExists:
                  "ec2:Vpc":
                    - !Sub "arn:${AWS::Partition}:ec2:${AWS::Region}:{{resolve:ssm:/SDLF/VPC/VpcAccountId}}:vpc/{{resolve:ssm:/SDLF/VPC/VpcId}}"
                "ForAllValues:StringEqualsIfExists":
                  "aws:TagKeys":
                    - aws-glue-service-resource
            - !Ref "AWS::NoValue"
          - !If
            - RunInVpc
            - Effect: Allow
              Action:
                - Glue:GetConnection
              Resource:
                - !Sub arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:catalog
                - !Sub arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:connection/sdlf-${pDatasetName}-glue-conn-*
            - !Ref "AWS::NoValue"

  rIamManagedPolicySsm:
    Type: AWS::SSM::Parameter
    Condition: NotUseLegacyTeam
    Properties:
      Name: !Sub /SDLF/IAM/${pDatasetName}/TeamPermissionsBoundary
      Type: String
      Value: !Ref rIamManagedPolicy
      Description: The permissions boundary IAM Managed policy for the team

  rDynamoPipelineExecutionHistory:
    Type: AWS::DynamoDB::Table
    Condition: NotUseLegacyTeam
    Properties:
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: pipeline
          AttributeType: S
        - AttributeName: last_updated_timestamp
          AttributeType: S
        - AttributeName: execution_date
          AttributeType: S
        - AttributeName: status
          AttributeType: S
        - AttributeName: status_last_updated_timestamp
          AttributeType: S
        - AttributeName: dataset
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: pipeline-last-updated-index
          KeySchema:
            - AttributeName: pipeline
              KeyType: HASH
            - AttributeName: last_updated_timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: execution_date-status-index
          KeySchema:
            - AttributeName: execution_date
              KeyType: HASH
            - AttributeName: status
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: pipeline-execution_date-index
          KeySchema:
            - AttributeName: pipeline
              KeyType: HASH
            - AttributeName: execution_date
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: execution_date-last_updated-index
          KeySchema:
            - AttributeName: execution_date
              KeyType: HASH
            - AttributeName: last_updated_timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: status-last_updated-index
          KeySchema:
            - AttributeName: status
              KeyType: HASH
            - AttributeName: last_updated_timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: pipeline-status_last_updated-index
          KeySchema:
            - AttributeName: pipeline
              KeyType: HASH
            - AttributeName: status_last_updated_timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: dataset-status_last_updated_timestamp-index
          KeySchema:
            - AttributeName: dataset
              KeyType: HASH
            - AttributeName: status_last_updated_timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      SSESpecification:
        SSEEnabled: True
        SSEType: KMS
        KMSMasterKeyId: !GetAtt rKMSInfraKey.Arn
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: True
    UpdateReplacePolicy: Retain
    DeletionPolicy: Delete

  rDynamoPipelineExecutionHistorySsm:
    Type: AWS::SSM::Parameter
    Condition: NotUseLegacyTeam
    Properties:
      Name: !Sub /SDLF/Dynamo/${pDatasetName}/PipelineExecutionHistory
      Type: String
      Value: !Ref rDynamoPipelineExecutionHistory
      Description: Name of the DynamoDB used to store pipeline execution metadata

  rDynamoManifests:
    Type: AWS::DynamoDB::Table
    Condition: NotUseLegacyTeam
    Properties:
      KeySchema:
        - AttributeName: dataset_name
          KeyType: HASH
        - AttributeName: datafile_name
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: dataset_name
          AttributeType: S
        - AttributeName: datafile_name
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      SSESpecification:
        SSEEnabled: True
        SSEType: KMS
        KMSMasterKeyId: !GetAtt rKMSInfraKey.Arn
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: True
    UpdateReplacePolicy: Retain
    DeletionPolicy: Delete

  rDynamoManifestsSsm:
    Type: AWS::SSM::Parameter
    Condition: NotUseLegacyTeam
    Properties:
      Name: !Sub /SDLF/Dynamo/${pDatasetName}/Manifests
      Type: String
      Value: !Ref rDynamoManifests
      Description: Name of the DynamoDB used to store manifest process metadata

  rDatasetSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !If
        - NotUseLegacyTeam
        - !Sub /SDLF/Datasets/${pDatasetName}
        - !Sub /SDLF/Datasets/${pTeamName}/${pDatasetName}
      Type: String
      Value: !Ref pPipelineDetails # bit of a hack for datasets lambda
      Description: !Sub "Placeholder ${pDatasetName}"

Outputs:
  oPipelineReference:
    Description: CodePipeline reference this stack has been deployed with
    Value: !Ref pPipelineReference
  oPipelineTransforms:
    Description: Transforms to put in DynamoDB
    Value: !Ref pPipelineDetails

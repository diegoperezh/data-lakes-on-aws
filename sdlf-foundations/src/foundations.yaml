AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Resources to be created by the common stack

Parameters:
  pPipelineReference:
    Type: String
    Default: none
  pDeploymentInstance:
    Type: String
    Description: A string uniquely identifying this deployment in this AWS account
    Default: dev
  pChildAccountId: # used by cicd lambda
    Description: Child AWS account ID
    Type: String
    AllowedPattern: (\d{12}|^$)
    ConstraintDescription: Must be an AWS account ID
  pOrg:
    Description: Name of the organization owning the datalake (all lowercase, no symbols or spaces)
    Type: String
    AllowedPattern: "[a-z0-9]{2,10}"
  pDomain:
    Description: Data domain name
    Type: String
  pCustomBucketPrefix:
    Description: S3 Bucket Prefix if different from default. Must be a valid S3 Bucket name
    Type: String
    Default: sdlf
  pCicdRole:
    Description: Name of the IAM role used to deploy SDLF constructs
    Type: String
    Default: sdlf-cicd-domain

Conditions:
  UseCustomBucketPrefix: !Not [!Equals [!Ref pCustomBucketPrefix, sdlf]]

Resources:
  rOrganizationSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /sdlf/storage/rOrganization/${pDeploymentInstance}
      Type: String
      Value: !Ref pOrg
      Description: Name of the Organization owning the datalake

  rDomainSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /sdlf/storage/rDomain/${pDeploymentInstance}
      Type: String
      Value: !Ref pDomain
      Description: Data domain name

  ######## LAKE FORMATION #########
  rDataLakeSettings:
    Type: AWS::LakeFormation::DataLakeSettings
    Properties:
      Admins:
        - DataLakePrincipalIdentifier: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${pCicdRole}
      CreateDatabaseDefaultPermissions: []
      CreateTableDefaultPermissions: []
      MutationType: APPEND

  rLakeFormationDataAccessRole: # https://docs.aws.amazon.com/lake-formation/latest/dg/registration-role.html
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lakeformation.amazonaws.com
                - glue.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogStream
                - logs:CreateLogGroup
                - logs:PutLogEvents
              Resource:
                - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws-lakeformation-acceleration/*"
                - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws-lakeformation-acceleration/*:log-stream:*"

  rLakeFormationDataAccessRoleSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /sdlf/storage/rLakeFormationDataAccessRoleArn/${pDeploymentInstance}
      Type: String
      Value: !GetAtt rLakeFormationDataAccessRole.Arn
      Description: Lake Formation Data Access Role

  rLakeFormationDataAccessRoleNameSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /sdlf/storage/rLakeFormationDataAccessRole/${pDeploymentInstance}
      Type: String
      Value: !Ref rLakeFormationDataAccessRole
      Description: Lake Formation Data Access Role

  ######## KMS #########
  rKMSKey:
    Type: AWS::KMS::Key
    DeletionPolicy: RetainExceptOnCreate
    UpdateReplacePolicy: Retain
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: F76
            reason: Full access is allowed to Key admin and some AWS services
    Properties:
      Description: SDLF Foundations KMS Key
      EnableKeyRotation: True
      KeyPolicy:
        Version: "2012-10-17"
        Id: sdlf-key-default-policy
        Statement:
          - Sid: Allow administration of the key
            Effect: Allow
            Principal:
              AWS: [!Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"]
            Action: kms:*
            Resource: "*"
          - Sid: Allow CloudTrail/CloudWatch alarms access
            Effect: Allow
            Principal:
              Service:
                - cloudtrail.amazonaws.com
                - cloudwatch.amazonaws.com
                - events.amazonaws.com
            Action:
              - kms:Decrypt
              - kms:GenerateDataKey*
            Resource: "*"
          - Sid: Allow logs access
            Effect: Allow
            Principal:
              Service: !Sub logs.${AWS::Region}.amazonaws.com
            Action:
              - kms:CreateGrant
              - kms:Decrypt
              - kms:DescribeKey
              - kms:Encrypt
              - kms:GenerateDataKey*
              - kms:ReEncrypt*
            Resource: "*"
          - Sid: Allow SNS access
            Effect: Allow
            Principal:
              AWS: "*"
            Action:
              - kms:Decrypt
              - kms:GenerateDataKey*
            Resource: "*"
            Condition:
              StringEquals:
                kms:CallerAccount: !Ref AWS::AccountId
                kms:ViaService: !Sub sns.${AWS::Region}.amazonaws.com
          - Sid: Allow S3 Events access
            Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action:
              - kms:Decrypt
              - kms:GenerateDataKey
            Resource: "*"
          - Sid: Allow DynamoDB access
            Effect: Allow
            Principal:
              AWS: "*"
            Action:
              - kms:CreateGrant
              - kms:Decrypt
              - kms:DescribeKey
              - kms:Encrypt
              - kms:GenerateDataKey*
              - kms:ReEncrypt*
            Resource: "*"
            Condition:
              StringEquals:
                kms:CallerAccount: !Ref AWS::AccountId
                kms:ViaService: !Sub dynamodb.${AWS::Region}.amazonaws.com
          - Sid: Allow ElasticSearch access
            Effect: Allow
            Principal:
              AWS: "*"
            Action:
              - kms:CreateGrant
              - kms:Decrypt
              - kms:DescribeKey
              - kms:Encrypt
              - kms:GenerateDataKey*
              - kms:ReEncrypt*
            Resource: "*"
            Condition:
              StringEquals:
                kms:CallerAccount: !Ref AWS::AccountId
                kms:ViaService: !Sub es.${AWS::Region}.amazonaws.com
              Bool:
                kms:GrantIsForAWSResource: true
          - Sid: Allow LakeFormation access
            Effect: Allow
            Principal:
              AWS: !GetAtt rLakeFormationDataAccessRole.Arn
            Action:
              - kms:Encrypt*
              - kms:Decrypt*
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:Describe*
            Resource: "*"

  rKMSKeyAlias:
    Type: AWS::KMS::Alias
    UpdateReplacePolicy: Retain
    DeletionPolicy: RetainExceptOnCreate
    Properties:
      AliasName: !Sub alias/sdlf-kms-key-${pDeploymentInstance}
      TargetKeyId: !Ref rKMSKey

  rKMSKeySsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /sdlf/storage/rKMSKey/${pDeploymentInstance}
      Type: String
      Value: !GetAtt rKMSKey.Arn
      Description: ARN of the KMS key

  ######## S3 #########
  ####### Access Logging Bucket ######
  rS3AccessLogsBucket:
    Type: AWS::S3::Bucket
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W35
            reason: Access logs bucket should not have logging enabled https://docs.aws.amazon.com/AmazonS3/latest/userguide/enable-server-access-logging.html
    Properties:
      BucketName:
        !If
          - UseCustomBucketPrefix
          - !Sub "${pCustomBucketPrefix}-s3logs-${pDeploymentInstance}"
          - !Sub "${pOrg}-${pDomain}-${AWS::Region}-${AWS::AccountId}-s3logs-${pDeploymentInstance}"
      LifecycleConfiguration:
        Rules:
          - Id: InfrequentAccess
            Status: Enabled
            Transitions:
              - TransitionInDays: 30 # 60? TODO
                StorageClass: STANDARD_IA
          - Id: DeepArchive
            Status: Enabled
            Transitions:
              - TransitionInDays: 60
                StorageClass: DEEP_ARCHIVE
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: True
            ServerSideEncryptionByDefault:
              KMSMasterKeyID: !Ref rKMSKey
              SSEAlgorithm: aws:kms
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True

  rS3AccessLogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref rS3AccessLogsBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - s3:PutObject
            Effect: Allow
            Principal:
              Service: logging.s3.amazonaws.com
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${rS3AccessLogsBucket}/*
              - !Sub arn:${AWS::Partition}:s3:::${rS3AccessLogsBucket}
            Condition:
              ArnLike:
                "aws:SourceArn":
                  !If
                    - UseCustomBucketPrefix
                    - !Sub "arn:${AWS::Partition}:s3:::${pCustomBucketPrefix}*"
                    - !Sub "arn:${AWS::Partition}:s3:::${pOrg}-${pDomain}-${AWS::Region}-${AWS::AccountId}*"
              StringEquals:
                "aws:SourceAccount": !Sub ${AWS::AccountId}

  rS3AccessLogsBucketSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /sdlf/storage/rS3AccessLogsBucket/${pDeploymentInstance}
      Type: String
      Value: !Ref rS3AccessLogsBucket
      Description: S3 Access Logs Bucket

  rArtifactsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        !If
          - UseCustomBucketPrefix
          - !Sub "${pCustomBucketPrefix}-artifacts-${pDeploymentInstance}"
          - !Sub "${pOrg}-${pDomain}-${AWS::Region}-${AWS::AccountId}-artifacts-${pDeploymentInstance}"
      LoggingConfiguration:
        DestinationBucketName: !Ref rS3AccessLogsBucket
        LogFilePrefix:
          !If
            - UseCustomBucketPrefix
            - !Sub "${pCustomBucketPrefix}-artifacts-${pDeploymentInstance}"
            - !Sub "${pOrg}-${pDomain}-${AWS::Region}-${AWS::AccountId}-artifacts-${pDeploymentInstance}"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: True
            ServerSideEncryptionByDefault:
              KMSMasterKeyID: !GetAtt rKMSKey.Arn
              SSEAlgorithm: aws:kms
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True

  rArtifactsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref rArtifactsBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowSSLRequestsOnly
            Action: s3:*
            Effect: Deny
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${rArtifactsBucket}/*
              - !Sub arn:${AWS::Partition}:s3:::${rArtifactsBucket}
            Condition:
              Bool:
                aws:SecureTransport: False
            Principal: "*"

  rS3ArtifactBucketSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /sdlf/storage/rArtifactsBucket/${pDeploymentInstance}
      Type: String
      Value: !Ref rArtifactsBucket
      Description: Name of the Artifacts S3 bucket

  # To Enforce KMS encryption: https://aws.amazon.com/premiumsupport/knowledge-center/s3-bucket-store-kms-encrypted-objects/
  rRawBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        !If
          - UseCustomBucketPrefix
          - !Sub "${pCustomBucketPrefix}-raw-${pDeploymentInstance}"
          - !Sub "${pOrg}-${pDomain}-${AWS::Region}-${AWS::AccountId}-raw-${pDeploymentInstance}"
      LoggingConfiguration:
        DestinationBucketName: !Ref rS3AccessLogsBucket
        LogFilePrefix:
          !If
            - UseCustomBucketPrefix
            - !Sub "${pCustomBucketPrefix}-raw-${pDeploymentInstance}"
            - !Sub "${pOrg}-${pDomain}-${AWS::Region}-${AWS::AccountId}-raw-${pDeploymentInstance}"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: True
            ServerSideEncryptionByDefault:
              KMSMasterKeyID: !Ref rKMSKey
              SSEAlgorithm: aws:kms
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      VersioningConfiguration:
        Status: Enabled
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true

  rRawBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref rRawBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowSSLRequestsOnly
            Action: s3:*
            Effect: Deny
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${rRawBucket}/*
              - !Sub arn:${AWS::Partition}:s3:::${rRawBucket}
            Condition:
              Bool:
                aws:SecureTransport: False
            Principal: "*"

  rRawBucketLakeFormationS3Registration:
    Type: AWS::LakeFormation::Resource
    DependsOn: rLakeFormationDataAccessRolePolicy
    Properties:
      ResourceArn: !Sub arn:${AWS::Partition}:s3:::${rRawBucket}/
      RoleArn: !GetAtt rLakeFormationDataAccessRole.Arn
      UseServiceLinkedRole: False

  rS3RawBucketSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /sdlf/storage/rRawBucket/${pDeploymentInstance}
      Type: String
      Value: !Ref rRawBucket
      Description: Name of the Raw S3 bucket

  rStageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        !If
          - UseCustomBucketPrefix
          - !Sub "${pCustomBucketPrefix}-stage-${pDeploymentInstance}"
          - !Sub "${pOrg}-${pDomain}-${AWS::Region}-${AWS::AccountId}-stage-${pDeploymentInstance}"
      LoggingConfiguration:
        DestinationBucketName: !Ref rS3AccessLogsBucket
        LogFilePrefix:
          !If
            - UseCustomBucketPrefix
            - !Sub "${pCustomBucketPrefix}-stage-${pDeploymentInstance}"
            - !Sub "${pOrg}-${pDomain}-${AWS::Region}-${AWS::AccountId}-stage-${pDeploymentInstance}"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: True
            ServerSideEncryptionByDefault:
              KMSMasterKeyID: !Ref rKMSKey
              SSEAlgorithm: aws:kms
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      VersioningConfiguration:
        Status: Enabled
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true

  rStageBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref rStageBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowSSLRequestsOnly
            Action: s3:*
            Effect: Deny
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${rStageBucket}/*
              - !Sub arn:${AWS::Partition}:s3:::${rStageBucket}
            Condition:
              Bool:
                aws:SecureTransport: False
            Principal: "*"

  rStageBucketLakeFormationS3Registration:
    Type: AWS::LakeFormation::Resource
    DependsOn: rLakeFormationDataAccessRolePolicy
    Properties:
      ResourceArn: !Sub arn:${AWS::Partition}:s3:::${rStageBucket}/
      RoleArn: !GetAtt rLakeFormationDataAccessRole.Arn
      UseServiceLinkedRole: False

  rS3StageBucketSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /sdlf/storage/rStageBucket/${pDeploymentInstance}
      Type: String
      Value: !Ref rStageBucket
      Description: Name of the Stage S3 bucket

  rAnalyticsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        !If
          - UseCustomBucketPrefix
          - !Sub "${pCustomBucketPrefix}-analytics-${pDeploymentInstance}"
          - !Sub "${pOrg}-${pDomain}-${AWS::Region}-${AWS::AccountId}-analytics-${pDeploymentInstance}"
      LoggingConfiguration:
        DestinationBucketName: !Ref rS3AccessLogsBucket
        LogFilePrefix:
          !If
            - UseCustomBucketPrefix
            - !Sub "${pCustomBucketPrefix}-analytics-${pDeploymentInstance}"
            - !Sub "${pOrg}-${pDomain}-${AWS::Region}-${AWS::AccountId}-analytics-${pDeploymentInstance}"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: True
            ServerSideEncryptionByDefault:
              KMSMasterKeyID: !Ref rKMSKey
              SSEAlgorithm: aws:kms
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      VersioningConfiguration:
        Status: Enabled
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true

  rAnalyticsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref rAnalyticsBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowSSLRequestsOnly
            Action: s3:*
            Effect: Deny
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${rAnalyticsBucket}/*
              - !Sub arn:${AWS::Partition}:s3:::${rAnalyticsBucket}
            Condition:
              Bool:
                aws:SecureTransport: False
            Principal: "*"

  rAnalyticsBucketLakeFormationS3Registration:
    Type: AWS::LakeFormation::Resource
    DependsOn: rLakeFormationDataAccessRolePolicy
    Properties:
      ResourceArn: !Sub arn:${AWS::Partition}:s3:::${rAnalyticsBucket}/
      RoleArn: !GetAtt rLakeFormationDataAccessRole.Arn
      UseServiceLinkedRole: False

  rS3AnalyticsBucketSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /sdlf/storage/rAnalyticsBucket/${pDeploymentInstance}
      Type: String
      Value: !Ref rAnalyticsBucket
      Description: Name of the Analytics S3 bucket

  rAthenaBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        !If
          - UseCustomBucketPrefix
          - !Sub "${pCustomBucketPrefix}-athena-${pDeploymentInstance}"
          - !Sub "${pOrg}-${pDomain}-${AWS::Region}-${AWS::AccountId}-athena-${pDeploymentInstance}"
      LoggingConfiguration:
        DestinationBucketName: !Ref rS3AccessLogsBucket
        LogFilePrefix:
          !If
            - UseCustomBucketPrefix
            - !Sub "${pCustomBucketPrefix}-athena-${pDeploymentInstance}"
            - !Sub "${pOrg}-${pDomain}-${AWS::Region}-${AWS::AccountId}-athena-${pDeploymentInstance}"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: True
            ServerSideEncryptionByDefault:
              KMSMasterKeyID: !Ref rKMSKey
              SSEAlgorithm: aws:kms
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True

  rAthenaBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref rAthenaBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowSSLRequestsOnly
            Action: s3:*
            Effect: Deny
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${rAthenaBucket}/*
              - !Sub arn:${AWS::Partition}:s3:::${rAthenaBucket}
            Condition:
              Bool:
                aws:SecureTransport: False
            Principal: "*"

  rAthenaBucketSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /sdlf/storage/rAthenaBucket/${pDeploymentInstance}
      Type: String
      Value: !Ref rAthenaBucket
      Description: Name of the Athena results S3 bucket

  rLakeFormationDataAccessRolePolicy:
    Type: AWS::IAM::Policy # TODO: use ::RolePolicy
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason: Condition Applied to restrict access, and the KMS keys do not exist at this stage
    Properties:
      PolicyName: sdlf-lakeformation
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject*
              - s3:GetBucket*
              - s3:List*
              - s3:DeleteObject*
              - s3:PutObject
              - s3:PutObjectLegalHold
              - s3:PutObjectRetention
              - s3:PutObjectTagging
              - s3:PutObjectVersionTagging
              - s3:Abort*
            Resource:
              - !Sub "arn:${AWS::Partition}:s3:::${rRawBucket}"
              - !Sub "arn:${AWS::Partition}:s3:::${rStageBucket}"
              - !Sub "arn:${AWS::Partition}:s3:::${rAnalyticsBucket}"
              - !Sub "arn:${AWS::Partition}:s3:::${rRawBucket}/*"
              - !Sub "arn:${AWS::Partition}:s3:::${rStageBucket}/*"
              - !Sub "arn:${AWS::Partition}:s3:::${rAnalyticsBucket}/*"
          - Effect: Allow
            Action:
              - kms:Encrypt*
              - kms:Decrypt*
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:Describe*
            Resource: "*"
            Condition:
              "ForAnyValue:StringLike":
                "kms:ResourceAliases":
                  - !Sub alias/sdlf-kms-key-${pDeploymentInstance}
                  - alias/sdlf-kms-data-key-*
      Roles:
        - !Ref rLakeFormationDataAccessRole

Outputs:
  oPipelineReference:
    Description: CodePipeline reference this stack has been deployed with
    Value: !Ref pPipelineReference
  oDeploymentInstance:
    Description: A string uniquely identifying this deployment in this AWS account
    Value: !Ref pDeploymentInstance
  oChildAccountId:
    Description: Child AWS account ID
    Value: !Ref pChildAccountId
  oS3ArtifactsBucket:
    Description: Name of the domain's Artifacts S3 bucket
    Value: !Ref rArtifactsBucket

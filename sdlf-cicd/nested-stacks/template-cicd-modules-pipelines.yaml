AWSTemplateFormatVersion: "2010-09-09"
Description: CICD pipeline to publish CloudFormation module on multiple AWS accounts

Parameters:
  pArtifactsBucket:
    Description: The artifacts bucket used by CodeBuild and CodePipeline
    Type: AWS::SSM::Parameter::Value<String>
    Default: /SDLF/S3/DevOpsArtifactsBucket
  pKMSKey:
    Description: The KMS key used by CodeBuild and CodePipeline
    Type: AWS::SSM::Parameter::Value<String>
    Default: /SDLF/KMS/CICDKeyId
  pCicdRepository:
    Type: String
  pMainRepository:
    Type: String
  pMainRepositoryParserLambda:
    Type: String
  pMainRepositoryDomainLambda:
    Type: String
  pMainRepositoryCrossAccountTeamLambda:
    Type: String
  pBuildCloudFormationPackage:
    Type: String
  pEnvironment:
    Description: Environment name
    Type: String
    AllowedValues: [dev, test, prod]
  pGitPlatform:
    Description: Platform used to host git repositories
    Type: String
    AllowedValues: [CodeCommit, GitLab, GitHub]

Mappings:
  pCodeCommitBranch:
    dev:
      branch: dev
    test:
      branch: test
    prod:
      branch: main

Conditions:
  GitPlatformCodeCommit: !Equals [!Ref pGitPlatform, "CodeCommit"]
  GitPlatformNoCodeCommit: !Not [!Equals [!Ref pGitPlatform, "CodeCommit"]]

Resources:
  rMainRepositoryCodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - !If
                - GitPlatformCodeCommit
                - Effect: Allow
                  Action:
                    - codecommit:GetBranch
                    - codecommit:GetCommit
                    - codecommit:GitPull
                    - codecommit:GetRepository
                    - codecommit:UploadArchive
                    - codecommit:GetUploadArchiveStatus
                    - codecommit:CancelUploadArchive
                  Resource:
                    - !Sub arn:${AWS::Partition}:codecommit:${AWS::Region}:${AWS::AccountId}:${pMainRepository}
                    - !Sub arn:${AWS::Partition}:codecommit:${AWS::Region}:${AWS::AccountId}:${pCicdRepository}
                - !Ref "AWS::NoValue"
              - !If
                - GitPlatformNoCodeCommit
                - Effect: Allow
                  Action:
                    - codeconnections:UseConnection
                    - codestar-connections:UseConnection
                  Resource:
                    - !Sub "{{resolve:ssm:/SDLF/${pGitPlatform}/CodeConnection}}"
                  Condition:
                    "ForAllValues:StringLikeIfExists":
                      "codeconnections:FullRepositoryId":
                        - !Sub "{{resolve:ssm:/SDLF/${pGitPlatform}/Group}}/${pMainRepository}"
                        - !Sub "{{resolve:ssm:/SDLF/${pGitPlatform}/Group}}/${pCicdRepository}"
                      "codestar-connections:FullRepositoryId":
                        - !Sub "{{resolve:ssm:/SDLF/${pGitPlatform}/Group}}/${pMainRepository}"
                        - !Sub "{{resolve:ssm:/SDLF/${pGitPlatform}/Group}}/${pCicdRepository}"
                - !Ref "AWS::NoValue"
              - Effect: Allow
                Action:
                  - s3:Get*
                  - s3:ListBucket*
                  - s3:Put*
                Resource:
                  - !Sub arn:${AWS::Partition}:s3:::${pArtifactsBucket}/*
              - Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:Describe*
                  - kms:Encrypt
                  - kms:GenerateDataKey*
                  - kms:List*
                  - kms:ReEncrypt*
                Resource: !Ref pKMSKey
        - PolicyName: lambda-stages
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${pMainRepositoryParserLambda}
                  - !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${pMainRepositoryDomainLambda}
                  - !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${pMainRepositoryCrossAccountTeamLambda}
              - Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                Resource:
                  - !Sub "arn:${AWS::Partition}:codebuild:${AWS::Region}:${AWS::AccountId}:project/${pBuildCloudFormationPackage}"

  rMainRepositoryPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt rMainRepositoryCodePipelineRole.Arn
      Stages:
        - Name: Sources
          Actions: !If
            - GitPlatformCodeCommit
            - - Name: SourceMain
                ActionTypeId:
                  Category: Source
                  Owner: AWS
                  Version: "1"
                  Provider: CodeCommit
                OutputArtifacts:
                  - Name: SourceMainArtifact
                Configuration:
                  RepositoryName: !Ref pMainRepository
                  BranchName: !FindInMap [pCodeCommitBranch, !Ref pEnvironment, branch]
                  PollForSourceChanges: false
                RunOrder: 1
              - Name: SourceCicd
                ActionTypeId:
                  Category: Source
                  Owner: AWS
                  Version: "1"
                  Provider: CodeCommit
                OutputArtifacts:
                  - Name: SourceCicdArtifact
                Configuration:
                  RepositoryName: !Ref pCicdRepository
                  BranchName: !FindInMap [pCodeCommitBranch, !Ref pEnvironment, branch]
                  PollForSourceChanges: false
                RunOrder: 1
            - - Name: SourceMain
                ActionTypeId:
                  Category: Source
                  Owner: AWS
                  Version: "1"
                  Provider: CodeStarSourceConnection
                OutputArtifacts:
                  - Name: SourceMainArtifact
                Configuration:
                  ConnectionArn: !Sub "{{resolve:ssm:/SDLF/${pGitPlatform}/CodeConnection}}"
                  FullRepositoryId: !Sub "{{resolve:ssm:/SDLF/${pGitPlatform}/Group}}/${pMainRepository}"
                  BranchName: !FindInMap [pCodeCommitBranch, !Ref pEnvironment, branch]
                  OutputArtifactFormat: CODE_ZIP
                RunOrder: 1
              - Name: SourceCicd
                ActionTypeId:
                  Category: Source
                  Owner: AWS
                  Version: "1"
                  Provider: CodeStarSourceConnection
                OutputArtifacts:
                  - Name: SourceCicdArtifact
                Configuration:
                  ConnectionArn: !Sub "{{resolve:ssm:/SDLF/${pGitPlatform}/CodeConnection}}"
                  FullRepositoryId: !Sub "{{resolve:ssm:/SDLF/${pGitPlatform}/Group}}/${pCicdRepository}"
                  BranchName: !FindInMap [pCodeCommitBranch, !Ref pEnvironment, branch]
                  OutputArtifactFormat: CODE_ZIP
                RunOrder: 1
        -
          Name: MainRepositoryParser
          Actions:
            - Name: ParseDataDomainFiles
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Provider: Lambda
                Version: "1"
              InputArtifacts:
                - Name: SourceMainArtifact
              Configuration:
                FunctionName: !Ref pMainRepositoryParserLambda
                UserParameters: !FindInMap [pCodeCommitBranch, !Ref pEnvironment, branch]
              Namespace: ParseDataDomainFilesVariables
              RunOrder: 1
        -
          Name: CrossAccountTeamPipelineRole
          Actions:
            - Name: CreateTeamCrossAccountRole
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Provider: Lambda
                Version: "1"
              InputArtifacts:
                - Name: SourceCicdArtifact
              Configuration:
                FunctionName: !Ref pMainRepositoryCrossAccountTeamLambda
                UserParameters: "#{ParseDataDomainFilesVariables.Domains}"
              RunOrder: 1
        -
          Name: DomainPipeline
          Actions:
            - Name: PackageTemplate
              InputArtifacts:
                - Name: SourceCicdArtifact
              OutputArtifacts:
                - Name: TemplatePackage
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: "1"
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref pBuildCloudFormationPackage
                EnvironmentVariables: >-
                  [{"name":"TEMPLATE", "value":"template-cicd-team-repository.yaml", "type":"PLAINTEXT"}]
              RunOrder: 1
            - Name: CreateDomainCodePipeline
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Provider: Lambda
                Version: "1"
              InputArtifacts:
                - Name: SourceCicdArtifact
                - Name: TemplatePackage
              Configuration:
                FunctionName: !Ref pMainRepositoryDomainLambda
                UserParameters: "#{ParseDataDomainFilesVariables.Domains}"
              RunOrder: 2
      ArtifactStore:
        Type: S3
        EncryptionKey:
          Id: !Ref pKMSKey
          Type: KMS
        Location: !Ref pArtifactsBucket

  rMainRepositoryCodeCommitTriggerRole:
    Type: AWS::IAM::Role
    Condition: GitPlatformCodeCommit
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: sdlf-cicd-events-trigger
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: codepipeline:StartPipelineExecution
                Resource:
                  - !Sub arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:${rMainRepositoryPipeline}

  rMainRepositoryCodePipelineTriggerRule:
    Type: AWS::Events::Rule
    Condition: GitPlatformCodeCommit
    Properties:
      EventPattern:
        source:
          - aws.codecommit
        detail-type:
          - CodeCommit Repository State Change
        resources:
          - !Sub arn:${AWS::Partition}:codecommit:${AWS::Region}:${AWS::AccountId}:${pMainRepository}
          - !Sub arn:${AWS::Partition}:codecommit:${AWS::Region}:${AWS::AccountId}:${pCicdRepository}
        detail:
          event:
            - referenceCreated
            - referenceUpdated
          referenceType:
            - branch
          referenceName:
            - !FindInMap [pCodeCommitBranch, !Ref pEnvironment, branch]
      Targets:
        - Arn: !Sub arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:${rMainRepositoryPipeline}
          RoleArn: !GetAtt rMainRepositoryCodeCommitTriggerRole.Arn
          Id: sdlf-main

  rMainRepositoryPipelineSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /SDLF/CodePipeline/MainRepository${pEnvironment}Pipeline
      Type: String
      Value: !Ref rMainRepositoryPipeline
      Description: !Sub CodePipeline that triggers on sdlf-main ${pEnvironment} changes

AWSTemplateFormatVersion: "2010-09-09"
Description: CICD pipelines to automate SDLF workflows

Parameters:
  pArtifactsBucket:
    Description: The artifacts bucket used by CodeBuild and CodePipeline
    Type: AWS::SSM::Parameter::Value<String>
    Default: /SDLF/S3/DevOpsArtifactsBucket
  pKMSKey:
    Description: The KMS key used by CodeBuild and CodePipeline
    Type: AWS::SSM::Parameter::Value<String>
    Default: /SDLF/KMS/CICDKeyId
  pEnableVpc:
    Description: Deploy SDLF resources in a VPC
    Type: AWS::SSM::Parameter::Value<String>
    Default: /SDLF/VPC/Enabled

Conditions:
  RunInVpc: !Equals [!Ref pEnableVpc, true]

Resources:
  rGlueJobCodeBuildServiceRole:
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: EC2 permissions are controlled through the ec2:Vpc and ec2:AuthorizedService conditions
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: sdlf-codebuild
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/sdlf-*
              - Effect: Allow
                Action:
                  - s3:GetBucketAcl
                  - s3:GetBucketLocation
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                  - s3:PutObjectAcl
                Resource:
                  - !Sub arn:${AWS::Partition}:s3:::${pArtifactsBucket}/*
              - Effect: Allow
                Action: codecommit:GitPull
                Resource:
                  - !Sub arn:${AWS::Partition}:codecommit:${AWS::Region}:${AWS::AccountId}:sdlf-*
              - Effect: Allow
                Action:
                  - kms:CreateGrant
                  - kms:Decrypt
                  - kms:DescribeKey
                  - kms:Encrypt
                  - kms:GenerateDataKey*
                  - kms:ReEncrypt*
                Resource:
                  - !Ref pKMSKey
              - Effect: Allow
                Action: sts:AssumeRole
                Resource: !Sub arn:${AWS::Partition}:iam::*:role/sdlf-cicd-devops-crossaccount-pipeline
              - !If
                - RunInVpc
                - Effect: Allow
                  Action:
                    - ec2:DescribeSecurityGroups # W11 exception
                    - ec2:DescribeSubnets # W11 exception
                    - ec2:DescribeVpcs # W11 exception
                    - ec2:DescribeNetworkInterfaces # W11 exception
                    - ec2:DescribeDhcpOptions # W11 exception
                    - ec2:CreateNetworkInterface # W11 condition applied
                    - ec2:DeleteNetworkInterface # W11 condition applied
                  Resource:
                    - "*"
                  Condition:
                    ArnEqualsIfExists:
                      "ec2:Vpc":
                        - !Sub "arn:${AWS::Partition}:ec2:${AWS::Region}:{{resolve:ssm:/SDLF/VPC/VpcAccountId}}:vpc/{{resolve:ssm:/SDLF/VPC/VpcId}}"
                - !Ref "AWS::NoValue"
              - !If
                - RunInVpc
                - Effect: Allow
                  Action:
                    - ec2:CreateNetworkInterfacePermission
                  Resource:
                    - !Sub "arn:${AWS::Partition}:ec2:${AWS::Region}:{{resolve:ssm:/SDLF/VPC/VpcAccountId}}:network-interface/*"
                  Condition:
                    StringEquals:
                      "ec2:AuthorizedService": codebuild.amazonaws.com
                    ArnEquals:
                      "ec2:Vpc":
                        - !Sub "arn:${AWS::Partition}:ec2:${AWS::Region}:{{resolve:ssm:/SDLF/VPC/VpcAccountId}}:vpc/{{resolve:ssm:/SDLF/VPC/VpcId}}"
                - !Ref "AWS::NoValue"

  rGlueJobPackage:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Name: sdlf-cicd-build-glue-jobs
      Description: Prepares Glue jobs for deployment
      EncryptionKey: !Ref pKMSKey
      VpcConfig: !If
        - RunInVpc
        - SecurityGroupIds: !Split [",", !ImportValue sdlf-cicd-prerequisites-vpc-security-groups]
          Subnets: !Split [",", !ImportValue sdlf-cicd-prerequisites-vpc-subnets]
          VpcId: "{{resolve:ssm:/SDLF/VPC/VpcId}}"
        - !Ref "AWS::NoValue"
      Environment:
        EnvironmentVariables:
          - Name: AWS_PARTITION
            Type: PLAINTEXT
            Value: !Ref AWS::Partition
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:5.0
        Type: LINUX_CONTAINER
      QueuedTimeoutInMinutes: 60
      ServiceRole: !GetAtt rGlueJobCodeBuildServiceRole.Arn
      Source:
        BuildSpec: |
          version: 0.2
          env:
            exported-variables:
              - TRANSFORMS_CDL
              - CODEBUILD_RESOLVED_SOURCE_VERSION
          phases:
            install:
              runtime-versions:
                  python: 3.12
              commands:
                - |-
                    aws --version # version 1 installed using pip by codebuild
                    pip3 uninstall -y awscli
                    aws --version # version 2
                - pip3 install boto3
            build:
              commands:
                - |-
                    STS_ENDPOINT_URL="https://sts.$AWS_REGION.amazonaws.com"
                    SSM_ENDPOINT_URL="https://ssm.$AWS_REGION.amazonaws.com"
                    EC2_ENDPOINT_URL="https://ec2.$AWS_REGION.amazonaws.com"

                    temp_role=$(aws sts --endpoint-url "$STS_ENDPOINT_URL" assume-role --role-arn "arn:$AWS_PARTITION:iam::$DOMAIN_ACCOUNT_ID:role/sdlf-cicd-devops-crossaccount-pipeline" --role-session-name "codebuild-glue-job")
                    AWS_ACCESS_KEY_ID=$(echo "$temp_role" | jq .Credentials.AccessKeyId | xargs)
                    AWS_SECRET_ACCESS_KEY=$(echo "$temp_role" | jq .Credentials.SecretAccessKey | xargs)
                    AWS_SESSION_TOKEN=$(echo "$temp_role" | jq .Credentials.SessionToken | xargs)
                    export AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN
                    ARTIFACTS_BUCKET=$(aws ssm --endpoint-url "$SSM_ENDPOINT_URL" get-parameter --name "/SDLF/S3/ArtifactsBucket" --query "Parameter.Value" --output text) || exit 1
                    echo "Artifacts bucket to store Glue job scripts: $ARTIFACTS_BUCKET"

                    if [ -d "./transforms/" ]
                    then
                        pushd "./transforms/" || exit
                        TRANSFORMS=()

                        echo ">>>>> Beginning build of subdirectories >>>>>"
                        for dir in ./*/
                        do
                            dir=${dir%*/}      # remove the trailing "/"
                            TRANSFORM_NAME="${dir##*/}"    # print everything after the final "/"
                            echo "---- Looking to move to: "

                            pushd "$dir" || exit
                            echo "Moving into dir..."
                            echo "Current directory contents:"
                            ls
                            aws s3api put-object --bucket "$ARTIFACTS_BUCKET" \
                                                  --key "$TEAM/transforms/$TRANSFORM_NAME.py" \
                                                  --body "$TRANSFORM_NAME.py" || exit 1

                            # if there is a user-provided template, use it and do not add the glue job to the list of transforms
                            # it must be called template.yaml and accept two parameters called pTeamName and pGlueJob.
                            if [ -f "template.yaml" ]; then
                                CLOUDFORMATION_ENDPOINT_URL="https://cloudformation.$AWS_REGION.amazonaws.com"
                                STACK_NAME="sdlf-$TEAM-gluejob-$TRANSFORM_NAME-$ENVIRONMENT"
                                aws cloudformation --endpoint-url "$CLOUDFORMATION_ENDPOINT_URL" deploy \
                                    --stack-name "$STACK_NAME" \
                                    --template-file template.yaml \
                                    --parameter-overrides \
                                        pTeamName="$TEAM" \
                                        pGlueJob="$TRANSFORM_NAME" \
                                    --tags Framework=sdlf \
                                    --capabilities "CAPABILITY_NAMED_IAM" "CAPABILITY_AUTO_EXPAND" \
                                    --role-arn "$CROSSACCOUNT_TEAM_ROLE" || exit 1
                            else
                                TRANSFORMS+=("$TRANSFORM_NAME")
                            fi

                            popd || exit
                            echo "============= COMPLETED DIRECTORY BUILD ============="
                        done

                        # prepare the parameter that will be fed to the cloudformation template containing all glue jobs
                        printf -v joined "%s," "${TRANSFORMS[@]}"
                        TRANSFORMS_CDL="${joined%,}"
                        echo "TRANSFORMS_CDL - $TRANSFORMS_CDL"

                        VPC_ENABLED=$(aws ssm --endpoint-url "$SSM_ENDPOINT_URL" get-parameter --name "/SDLF/VPC/Enabled" --query "Parameter.Value" --output text) || exit 1
                        if [[ "$VPC_ENABLED" == "true" ]]
                        then
                            # for each subnet defined in /SDLF/VPC/SubnetIds, find in which AZ it lives in, then add to the Cloudformation template
                            # a Glue connection per subnet. Frankly we would prefer to avoid doing these kind of things.
                            # it can be revisited when AvailabilityZone is no longer required in PhysicalConnectionRequirements
                            SUBNETS_CDL=$(aws ssm --endpoint-url "$SSM_ENDPOINT_URL" get-parameter --name "/SDLF/VPC/SubnetIds" --query "Parameter.Value" --output text) || exit 1
                            echo "Subnets provided: $SUBNETS_CDL"
                            if [[ -n "$SUBNETS_CDL" ]]
                            then
                                # convert comma-delimited list to array
                                IFS="," read -ra SUBNETS <<< "$SUBNETS_CDL"
                                BUILDSTEPVARIABLE_GLUECONNECTIONS=""
                                for i in "${!SUBNETS[@]}"
                                do
                                    BUILDSTEPVARIABLE_AZ=$(aws ec2 --endpoint-url "$EC2_ENDPOINT_URL" describe-subnets --subnet-id "${SUBNETS[$i]}" --query "Subnets[0].AvailabilityZone" --output text) || exit 1
                                    BUILDSTEPVARIABLE_NOHYPHEN_AZ="$i${BUILDSTEPVARIABLE_AZ//-/}"
                                    awk \
                                        -v BUILDSTEPVARIABLE_NOHYPHEN_AZ="$BUILDSTEPVARIABLE_NOHYPHEN_AZ" \
                                        -v BUILDSTEPVARIABLE_AZ="$BUILDSTEPVARIABLE_AZ" \
                                        -v BUILDSTEPVARIABLE_SUBNET="${SUBNETS[$i]}" '{
                                          sub(/%{BUILDSTEPVARIABLE_NOHYPHEN_AZ}/, BUILDSTEPVARIABLE_NOHYPHEN_AZ);
                                          sub(/%{BUILDSTEPVARIABLE_AZ}/, BUILDSTEPVARIABLE_AZ);
                                          sub(/%{BUILDSTEPVARIABLE_SUBNET}/, BUILDSTEPVARIABLE_SUBNET);
                                          print;
                                    }' "$CODEBUILD_SRC_DIR_SourceCicdArtifact"/template-glue-job.part >> "$CODEBUILD_SRC_DIR_SourceCicdArtifact"/template-glue-job.yaml
                                    BUILDSTEPVARIABLE_GLUECONNECTIONS+="                - !Ref r${BUILDSTEPVARIABLE_NOHYPHEN_AZ}GlueConnection"$'\n'
                                done
                            fi
                        fi
                        popd || exit 1
                    fi
                    if [[ -n "$BUILDSTEPVARIABLE_GLUECONNECTIONS" ]]
                    then
                        BUILDSTEPVARIABLE_GLUECONNECTIONS=${BUILDSTEPVARIABLE_GLUECONNECTIONS%$'\n'}
                        awk -i inplace -v BUILDSTEPVARIABLE_GLUECONNECTIONS="$BUILDSTEPVARIABLE_GLUECONNECTIONS" '{
                          sub(/              - BUILDSTEPVARIABLE_GLUECONNECTIONS/, BUILDSTEPVARIABLE_GLUECONNECTIONS);
                          print;
                        }' "$CODEBUILD_SRC_DIR_SourceCicdArtifact"/template-glue-job.yaml
                    fi
                    cp "$CODEBUILD_SRC_DIR_SourceCicdArtifact"/template-glue-job.yaml template-glue-job.full.yaml
          artifacts:
            files:
              - template-glue-job.full.yaml
        Type: CODEPIPELINE
      TimeoutInMinutes: 20

  ######## SSM OUTPUTS #########
  rGlueJobPackageSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /SDLF/CodeBuild/PrepareGlueJobPackage
      Type: String
      Value: !Ref rGlueJobPackage
      Description: Name of the CodeBuild job that prepares Glue jobs
